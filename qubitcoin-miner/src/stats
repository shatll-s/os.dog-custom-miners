#!/bin/bash

#	example
#
#	{
#		"miner":"lolminer",
#		"algo":"nexapow",
#		"online":"1707474764",
#		"total_hr":"71842910",
#		"total_share":"1",
#		"total_badshare":"0",
#		"ver":"1.82a",
#		"temp":[31,28,29,29,31,29,30,30],
#		"temp2":[38,35,35,35,37,34,37,37],
#		"temp3":[0,0,0,0,0,0,0,0],
#		"fan":[45,45,44,45,44,44,45,46],
#		"hr":[11580000,27740000,0,0,2990000,0,22650000,6880000],
#		"share":[0,1,0,0,0,0,0,0],
#		"badshare":[0,0,0,0,0,0,0,0],
#		"invshare":[0,0,0,0,0,0,0,0],
#		"busid":["03","05","06","07","09","0b","0c","0d"],
#		"coin":"NEXA"
#	}

convert_hashrate_to_hps() {
  local raw_hashrate="$1"  # Пример: "668.92 MH/s"

  # Разделяем на значение и единицу
  local value=$(echo "$raw_hashrate" | awk '{print $1}')
  local unit=$(echo "$raw_hashrate" | awk '{print $2}')

  # Определяем множитель
  local multiplier
  case "$unit" in
    H/s)   multiplier=1 ;;
    kH/s)  multiplier=1000 ;;
    MH/s)  multiplier=1000000 ;;
    GH/s)  multiplier=1000000000 ;;
    TH/s)  multiplier=1000000000000 ;;
    *)     echo "Ошибка: неизвестная единица '$unit'" >&2; return 1 ;;
  esac

  # Вычисляем H/s
  local result=$(printf "%.0f" "$(echo "$value * $multiplier" | bc -l)")
  echo "$result"
}

algo="8infinity"
miner="8infinity"
#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"

dirname=$(dirname "$(realpath "$0")")
. $dirname/$CFG_FILENAME

ver=$(basename "$dirname" | sed -E 's/.*-([0-9]+\.[0-9]+)$/\1/')
LOG_FILE="/dog/log/8infinity-miner.log"
maxFreshness=60

lastStats=`awk '/\| STATS/ {block=""; capture=1} capture {block = block $0 ORS} /\| $/ && capture {capture=0; out=block} END {print out}' "$LOG_FILE"`
logTimeString=$(echo "$lastStats" | grep -m1 -oP '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}')

logTimestamp=$(date -d "$logTimeString" +%s)
nowTimestamp=$(date +%s)
delta=$((nowTimestamp - logTimestamp))
if (( delta > maxFreshness )); then
  exit 1
fi

balance=$(echo "$lastStats" | grep 'native balance:' | awk -F': ' '{print $2}')
mined=$(echo "$lastStats" | grep 'mined tokens:' | awk -F': ' '{print $2}')

if [[ -n "$balance" && -n "$mined" ]]; then
  ver="$ver | balance: $balance | mined: $mined"
fi

raw_total_hr=$(echo "$lastStats" | grep 'hashrate:' | awk -F': ' '{print $2}')
total_hr=$(convert_hashrate_to_hps "$raw_total_hr")

GPU_STATS="/run/dog/gpuStats"
gpuCount=$(jq '.gpu | length' < "$GPU_STATS")

busid_json='[]'
declare -a hr_data=( )

# initialise array with 0
for (( i=0; i < gpuCount; i++ )); do
  hr_data+=(0)
done

for (( i=0; i < gpuCount; i++ )); do
    busid=$(jq -r ".gpu[$i].b" < "$GPU_STATS")
    busid_json=$(jq ". += [\"$busid\"]" <<< "$busid_json")
done

hr_json=$(printf '%s\n' "${hr_data[@]}" | jq -R . | jq -s .)
#
## calculate total_hr
#totalHr=0
#for hr in "${hr_data[@]}"; do
#    totalHr=$(echo "$totalHr + $hr" | bc)
#done

online=`ps -eo lstart,pid,cmd | grep 'unbuffer python3 files/src/main.py' | grep -v grep | awk '{$6=""; $7=""; $8=""; print $0}' | cut -d ' ' -f1-5 | xargs -I{} date -d "{}" +%s`

data=$(
    jq -n \
        --arg algo "$algo" \
        --arg miner "$miner" \
        --arg total_hr "$total_hr" \
        --arg online "$online" \
        --arg ver "$ver" \
        --argjson busid "$busid_json" \
        --argjson hr "$hr_json" \
    '{
        miner: $miner,
        algo: $algo,
        busid: $busid,
        hr: $hr,
        $total_hr,
        $online,
        $ver
    }'
)

echo "$data" | jq -c
