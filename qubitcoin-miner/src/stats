#!/bin/bash

#	example
#
#	{
#		"miner":"lolminer",
#		"algo":"nexapow",
#		"online":"1707474764",
#		"total_hr":"71842910",
#		"total_share":"1",
#		"total_badshare":"0",
#		"ver":"1.82a",
#		"temp":[31,28,29,29,31,29,30,30],
#		"temp2":[38,35,35,35,37,34,37,37],
#		"temp3":[0,0,0,0,0,0,0,0],
#		"fan":[45,45,44,45,44,44,45,46],
#		"hr":[11580000,27740000,0,0,2990000,0,22650000,6880000],
#		"share":[0,1,0,0,0,0,0,0],
#		"badshare":[0,0,0,0,0,0,0,0],
#		"invshare":[0,0,0,0,0,0,0,0],
#		"busid":["03","05","06","07","09","0b","0c","0d"],
#		"coin":"NEXA"
#	}

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"

dirname=$(dirname "$0")
[[ -f "$dirname/$CFG_FILENAME" ]] && . $dirname/$CFG_FILENAME

GPU_STATS="/run/dog/gpuStats"
# Get GPU count from stats file, or default to 1 if file doesn't exist
if [[ ! -f "$GPU_STATS" ]]; then
    gpuCount=$(jq '.gpu | length' < "$GPU_STATS")
else
    gpuCount=0
fi

busid_json='[]'
declare -a hr_data=( )
declare -a acc_data=( )
declare -a rej_data=( )

# initialise arrays with 0 for all GPUs
for (( i=0; i < gpuCount; i++ )); do
  hr_data+=(0)
  acc_data+=(0)
  rej_data+=(0)
done

API_TIMEOUT=2

miner_online_raw=
miner_ver=
miner=
algo=

# Get summary data from unified API
summary_data=$(echo "summary" | nc -w $API_TIMEOUT localhost $API_PORT | tr -d '\0')
if [[ -n $summary_data ]]; then
    miner_online_raw=$(echo -e "$summary_data" | sed -e 's/;/\n/g; s/.*UPTIME=\([0-9]*\)\n.*/\1/')
    miner_ver=$(echo -e "$summary_data" | sed -e 's/;/\n/g; s/.*VER=\([-a-zA-Z0-9.]*\)\n.*/\1/')
    miner=$(echo -e "$summary_data" | sed -e 's/;/\n/g; s/.*NAME=\([-a-zA-Z0-9.]*\)\n.*/\1/')
    algo=$(echo -e "$summary_data" | sed -e 's/;/\n/g; s/.*ALGO=\([a-zA-Z0-9.]*\)\n.*/\1/')
fi

# Get per-GPU data from unified API
gpus_data=$(echo "gpus" | nc -w $API_TIMEOUT localhost $API_PORT | tr -d '\0')

if [[ -n $gpus_data ]]; then
    # Parse GPU data - format: GPU=0;Device=0;H/s=5612.88;Threads=12;Accepted=3;Rejected=0|
    # Split by | to get individual GPU entries
    IFS='|' read -ra gpu_entries <<< "$gpus_data"
    
    for entry in "${gpu_entries[@]}"; do
        if [[ -n "$entry" && "$entry" =~ GPU=([0-9]+) ]]; then
            gpu_index="${BASH_REMATCH[1]}"
            
            # Ensure gpu_index is within our expected range
            if (( gpu_index < gpuCount )); then
                # Extract hashrate (convert from H/s to raw value)
                if [[ "$entry" =~ H/s=([0-9.]+) ]]; then
                    hr="${BASH_REMATCH[1]}"
                    # Convert to integer (multiply by 1 to remove decimals)
                    hr_int=$(echo "scale=0; $hr * 1" | bc -l)
                    hr_data[$gpu_index]=$hr_int
                fi
                
                # Extract accepted shares
                if [[ "$entry" =~ Accepted=([0-9]+) ]]; then
                    acc="${BASH_REMATCH[1]}"
                    acc_data[$gpu_index]=$acc
                fi
                
                # Extract rejected shares
                if [[ "$entry" =~ Rejected=([0-9]+) ]]; then
                    rej="${BASH_REMATCH[1]}"
                    rej_data[$gpu_index]=$rej
                fi
                
                # Get busid for this GPU from GPU_STATS
                if [[ -f "$GPU_STATS" ]]; then
                    busid=$(jq -r ".gpu[$gpu_index].b" < "$GPU_STATS" 2>/dev/null || echo "00")
                else
                    busid="00"
                fi
                busid_json=$(jq ". += [\"$busid\"]" <<< "$busid_json")
            fi
        fi
    done
fi

# Fill remaining busids for GPUs that weren't reported by miner
current_busid_count=$(echo "$busid_json" | jq 'length')
for (( i=current_busid_count; i < gpuCount; i++ )); do
    if [[ -f "$GPU_STATS" ]]; then
        busid=$(jq -r ".gpu[$i].b" < "$GPU_STATS" 2>/dev/null || echo "00")
    else
        busid="00"
    fi
    busid_json=$(jq ". += [\"$busid\"]" <<< "$busid_json")
done

hr_json=$(printf '%s\n' "${hr_data[@]}" | jq -R . | jq -s .)
acc_json=$(printf '%s\n' "${acc_data[@]}" | jq -R . | jq -s .)
rej_json=$(printf '%s\n' "${rej_data[@]}" | jq -R . | jq -s .)

# calculate total_hr
totalHr=0
for val in "${hr_data[@]}"; do
    totalHr=$(echo "$totalHr + $val" | bc)
done

# calculate total shares
totalAcc=0
for val in "${acc_data[@]}"; do
    totalAcc=$(echo "$totalAcc + $val" | bc)
done

# calculate total rejected shares
totalRej=0
for val in "${rej_data[@]}"; do
    totalRej=$(echo "$totalRej + $val" | bc)
done

data=$(
    jq -n \
        --arg algo "$algo" \
        --arg miner "$miner" \
        --arg ver "$miner_ver" \
        --argjson busid "$busid_json" \
        --argjson hr "$hr_json" \
        --argjson share "$acc_json" \
        --argjson badshare "$rej_json" \
    '{
        $miner,
        $algo,
        $ver,
        total_hr: "'"$totalHr"'",
        total_share: "'"$totalAcc"'",
        total_badshare: "'"$totalRej"'",
        busid: $busid,
        hr: $hr,
        share: $share,
        badshare: $badshare
    }'
)

if [[ ! -z $miner_online_raw ]]; then
  online=$(date --date "-$miner_online_raw sec" +%s)
  data=`jq ". += {\"online\": $online}" <<< "$data"`
fi

echo "$data" | jq -c