#!/bin/bash
####################################################################################
###
### qubitcoin miner
### os.dog integration: @osdog
###
####################################################################################
. /dog/colors
cd `dirname $0`

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"
. $CFG_FILENAME

#	custom package variables
####################################################################################
CONFIG_FILE=config.env
LOG="/dog/log/qubitcoin-miner.log"
#	custom package body
####################################################################################

# install section
./install.sh

# install section end

# parse args
parse_args() {
    local args="$1"
    shift
    local keys=("$@")

    read -ra tokens <<< "$args"
    local filtered=()

    for ((i = 0; i < ${#tokens[@]}; i++)); do
        local token="${tokens[i]}"
        local is_key=0

        for key in "${keys[@]}"; do
            if [[ "$token" == "--$key" ]]; then
                local var_name="${key//-/_}"
                if (( i + 1 < ${#tokens[@]} )); then
                    local value="${tokens[$((i+1))]}"
                    export "${var_name}=$value"
                else
                    export "${var_name}="
                fi
                ((i++)) # skip the value
                is_key=1
                break
            fi
        done

        if [[ $is_key -eq 0 ]]; then
            filtered+=("${token}")
        fi
    done

    REMAINING_ARGS="${filtered[*]}"  # Set global variable instead
}



echo "> additional args: $ADDITION"
REMAINING_ARGS=""
parse_args "$ADDITION" gpu_count
remainingAddition=$REMAINING_ARGS
echo "> remaining args: $remainingAddition"
echo "> using ${gpu_count} gpus"

[ -z "$gpu_count" ] && gpu_count=$(gpu-detect nvidia)

$LINE
echo -e "${GREEN}> Starting custom miner:${WHITE}"

MY_PID=$$

echo "> using ${gpu_count} gpus"
for ((i = 0; i < gpu_count; i++)); do
  threads=1

  echo "> GPU $i â†’ -t $threads"
  screenName="qubitcoin-miner$i"
  apiPort="4444$i"
  log="/dog/log/qubitcoin-miner$i.log"
  #  --coinbase-addr $WALLET
  batch="CUDA_VISIBLE_DEVICES=$i ./qubitcoin-miner --algo qhash -t $threads --api-bind $apiPort"
  [[ $POOL ]] && batch="$batch --url $POOL"
  [[ $PASS ]] && batch="$batch --userpass $PASS"
  [[ $TEMPLATE ]] && batch="$batch -u $TEMPLATE"

  [[ $remainingAddition ]] && batch="$batch $$remainingAddition"

  fullBatch=$(cat <<EOF
(
  ( while kill -0 $MY_PID 2>/dev/null; do sleep 1; done
    echo "GPU $i: parent died, shutting down miner..."
    kill \$\$ ) &

  while true; do $batch 2>&1 | tee -a $log; done
)
EOF
)

  echo "$batch"

  screen-kill $screenName
  screen -dmS "$screenName" bash -c "$fullBatch"
done

# for infinity
tail -f /dev/null
