#!/bin/bash
####################################################################################
###
### bteminer for luckypool
### os.dog integration: shatll(@osdog)
###
####################################################################################

#   example
#
#	{
#		"miner":"lolminer",
#		"algo":"nexapow",
#		"online":"1707474764",
#		"total_hr":"71842910",
#		"total_share":"1",
#		"total_badshare":"0",
#		"ver":"1.82a",
#		"hr":[11580000,27740000,0,0,2990000,0,22650000,6880000],
#		"share":[0,1,0,0,0,0,0,0],
#		"badshare":[0,0,0,0,0,0,0,0],
#		"invshare":[0,0,0,0,0,0,0,0],
#		"busid":["03","05","06","07","09","0b","0c","0d"],
#		"coin":"NEXA"
#		"temp":[31,28,29,29,31,29,30,30],     #  unnecessary field if 'busid' is provided
#		"temp2":[38,35,35,35,37,34,37,37],    #  unnecessary field if 'busid' is provided
#		"temp3":[0,0,0,0,0,0,0,0],            #  unnecessary field if 'busid' is provided
#		"fan":[45,45,44,45,44,44,45,46],      #  unnecessary field if 'busid' is provided
#	}


baseDir=`dirname $0`


LOG="/dog/log/bteminer.log"

algo="peach"
miner="bteminer"

ver='1.0'

data=$(
		jq -n \
    --arg algo "$algo" \
    --arg miner "$miner" \
		'{
			$miner,
			$algo
		}'
)
minername="bteminer"
online_raw=`ps -C $minername -o etimes= | awk '{print $1}' | tac | tail -n 1`
if [[ ! -z $online_raw ]]; then
  online=$(date --date "-$online_raw sec" +%s) #absolute time
  data=`jq ". += {\"online\": $online}" <<< "$data"`
fi

# Extract per-card hashrates from bteminer log
busid_json=[]
hr_json=[]
totalHr=0

# Find the most recent work summary block and extract only the GPU lines from it
workSummaryStart=$(tail -n 100 $LOG | grep -n "Work summary" | tail -n 1 | cut -d: -f1)
if [[ -n $workSummaryStart ]]; then
  # Get lines after the last work summary until the next "Total" or "New work" line
  workSummary=$(tail -n 100 $LOG | tail -n +$workSummaryStart | sed -n '/Work summary/,/Total\|New work/p' | grep "0000:")
  
  # Extract individual GPU hashrates
  while IFS= read -r line; do
    if [[ $line =~ 0000:00:([0-9a-f]{2}).*[[:space:]]([0-9]+\.[0-9]+)KH/s ]]; then
      # Convert bus ID to hex format
      busid_raw="${BASH_REMATCH[1]}"
      hashrate_kh="${BASH_REMATCH[2]}"

      # Convert decimal bus ID from log to hex format (10 -> 0a, 12 -> 0c, etc.)
      busid_hex=$(printf "%02x" $((10#$busid_raw)))
      
      # Convert KH/s to H/s (e.g. 378.39 -> 378390)
      hashrate=$(echo "$hashrate_kh * 1000" | bc -l | cut -d. -f1)
      
      busid_json=$(jq ". += [\"$busid_hex\"]" <<< "$busid_json")
      hr_json=$(jq ". += [$hashrate]" <<< "$hr_json")
      totalHr=$(echo "$totalHr + $hashrate" | bc)
    fi
  done <<< "$workSummary"
fi

if [[ ! -z $busid_json ]]; then
  data=`jq ". += {\"busid\": $busid_json}" <<< "$data"`
fi

if [[ ! -z $hr_json ]]; then
  data=$(jq ". += {\"hr\": $hr_json}" <<< "$data")
  data=$(jq ". += {\"total_hr\": \"$totalHr\"}" <<< "$data")
fi

# Extract total shares from bteminer log (remove ANSI color codes)
shareStats=$(tail -n 100 $LOG | grep "Share accepted" | tail -n 1 | sed 's/\x1b\[[0-9;]*m//g' | awk -F'[(/)]' '{print $2 " " $3}')
if [[ -n $shareStats ]]; then
  totalShares=$(echo "$shareStats" | awk '{print $1}')
  totalBadshares=$(echo "$shareStats" | awk '{print $2}')
  data=$(jq ". += {\"total_share\": \"$totalShares\"}" <<< "$data")
  data=$(jq ". += {\"total_badshare\": \"$totalBadshares\"}" <<< "$data")
fi

# Extract current block info for version
blockInfo=`tail -n 20 $LOG | grep "New work from" | tail -n 1 | sed -e 's/.*block \([0-9]*\).*/\1/'`
[[ $blockInfo ]] && ver="$ver | block ${blockInfo}"
data=`jq ". += {\"ver\": \"$ver\"}" <<< "$data"`

#   finally return json data
echo "$data" | jq -c
