#!/bin/bash

#	example
#
#	{
#		"miner":"lolminer",
#		"algo":"nexapow",
#		"online":"1707474764",
#		"total_hr":"71842910",
#		"total_share":"1",
#		"total_badshare":"0",
#		"ver":"1.82a",
#		"temp":[31,28,29,29,31,29,30,30],
#		"temp2":[38,35,35,35,37,34,37,37],
#		"temp3":[0,0,0,0,0,0,0,0],
#		"fan":[45,45,44,45,44,44,45,46],
#		"hr":[11580000,27740000,0,0,2990000,0,22650000,6880000],
#		"share":[0,1,0,0,0,0,0,0],
#		"badshare":[0,0,0,0,0,0,0,0],
#		"invshare":[0,0,0,0,0,0,0,0],
#		"busid":["03","05","06","07","09","0b","0c","0d"],
#		"coin":"NEXA"
#	}

algo="neptune"
miner="neptune_prover"
EXEC_FILE="dr_neptune_prover"

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
CFG_FILENAME="miner.cfg"

dirname=$(dirname "$0")
. $dirname/$CFG_FILENAME

LOG_FILE="/dog/log/neptune.log"
GPU_STATS="/run/dog/gpuStats"
gpuCount=$(jq '.gpu | length' < "$GPU_STATS")

busid_json='[]'
declare -a hr_data=( )

# initialise array with 0
for (( i=0; i < gpuCount; i++ )); do
  hr_data+=(0)
done

for (( i=0; i < gpuCount; i++ )); do
    busid=$(jq -r ".gpu[$i].b" < "$GPU_STATS")

    busid_json=$(jq ". += [\"$busid\"]" <<< "$busid_json")

    #rawHr=`echo $stats_template | jq ".hashrate_per_device.\"$i\".ten_seconds | floor"`
    #
    #if (( $(echo "$rawHr > 0" | bc -l) )); then
    #    hr_data[$i]=$rawHr
    #fi
done
#hr_json=$(printf '%s\n' "${hr_data[@]}" | jq -R . | jq -s .)
# calculate total_hr

khs=$(tail -n 100 $LOG_FILE |grep "Last 1m speed(KP/s)" | awk 'END {print}'| awk '{print $5}')
totalHr=$(echo "$khs" | jq -R . | jq -s 'map(tonumber)[0]')

online_raw=`ps -C $EXEC_FILE -o etimes= | awk '{print $1}' | tac | tail -n 1`
if [[ ! -z $online_raw ]]; then
  online=$(date --date "-$online_raw sec" +%s) #absolute time
  #data=`jq ". += {\"online\": $online}" <<< "$data"`
fi

execPath="$(dirname $0)/$EXEC_FILE"
ver=`$execPath --version | awk '{print $3}'`
[[ ! $ver ]] && ver='unknown'

data=$(
    jq -n \
        --arg algo "$algo" \
        --arg miner "$miner" \
        --argjson busid "$busid_json" \
        --arg online "$online" \
        --arg ver "$ver" \
    '{
        $miner,
        $algo,
        total_hr: "'"$totalHr"'",
        $busid,
        $online,
        $ver
    }'
)

echo "$data" | jq -c
